<?php
/**
 * @file
 * Provide jquery carousel style plugin for views
 */


// Trying to make sure the theme.inc get's loaded.
include_once('views/theme/jquery_carousel.theme.inc');

/**
 * Implements hook_views_api().
 */
function jquery_carousel_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'jquery_carousel') . '/views'
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function jquery_carousel_field_formatter_info() {
  return array(
    // the key must be unique, so it's best to prefix with your module's name.
    'jquery_carousel_images' => array(
      // the label is is what is displayed in the select box in the UI.
      'label' => t('jQuery Carousel'),
      // field types is the important bit!! List the field types your formatter is for.
      'field types' => array('image'),
      // Settings form for jquery carousel formatter.
      'settings'  => _jquery_carousel_formatter_defaults(),
    ),
  );
}

/**
 * Formatter settings form.
 */
function _jquery_carousel_formatter_defaults($settings = array()) {
  $settings +=
    array(
      'itemsPerTransition' => 'auto',
      'orientation' => 'horizontal',
      'loop' => FALSE,
      'whitespace' => FALSE,
      'nextPrevActions' => TRUE,
      'pagination' => FALSE,
      'speed' => 'normal',
      'easing' => 'swing',
      'autoScroll' => TRUE,
      'interval' => 8000,
      'continuous' => FALSE,
      'touch' => TRUE,
      'disabled' => FALSE
    );

  return $settings;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function aria_custom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = _jquery_carousel_formatter_defaults($display['settings']);
  $jquery_carousel_form = jquery_carousel_config_form();

  foreach ($jquery_carousel_form as $key => $form) {
    $jquery_carousel_form[$key]['#default_value'] = isset($settings[$key]) ? $settings[$key] : $jquery_carousel_form[$key]['#default_value'];
  }

  return $jquery_carousel_form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Returns a short summary for the current formatter settings of an instance.
 * @TODO: return more info, like the Date module does.
 */
function aria_custom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $formatter = $display['type'];
  $summary = array();

  $summary[] = t('Displays multivalued image field content in form of a carousel.');

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function jquery_carousel_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if (!$items) {
    return $element;
  }

  // Initialize formatter settings.
  $settings = _jquery_carousel_formatter_defaults($display['settings']);

  // Theme the result
  $element[] = array(
    '#markup' => theme(
      'jquery_carousel_field_formatter',
      array(
        'element'  => $items,
        'display'  => $display,
        'settings' => $settings,
      )
    ),
  );
  return $element;
}

/**
 * Implements hook_theme()
 */
function jquery_carousel_theme() {
  return array(
    'jquery_carousel_field_formatter' => array()
  );
}
/**
 * Template preprocessor for jquery carousel views style plugin.
 *
 * @param $vars
 */
function template_preprocess_jquery_carousel(&$vars) {
  _jquery_carousel_preprocess_jquery_carousel($vars);
}

/**
 * Helper function to create config form
 * Same form can be used for views style plugin & field formatter
 *
 * @return array
 */
function jquery_carousel_config_form() {
  $form = array();

  $form['itemsPerTransition'] = array(
    '#type' => 'textfield',
    '#title' => t('Items per transition'),
    '#description' => t('number of items moved with each transition, default: auto'),
    '#default_value' => 'auto'
  );

  $form['orientation'] = array(
    '#type' => 'select',
    '#title' => t('Orientation'),
    '#description' => t('Sets the orientation of the carousel, either horizontal or vertical.'),
    '#options' => array('horizontal' => "Horizontal", 'vertical' => "Vertical"),
    '#default_value' => 1
  );

  $form['loop'] = array(
    '#type' => 'select',
    '#title' => t('Loop'),
    '#description' => t('If set to true carousel will loop back to first or last page accordingly.'),
    '#options' => array(0 => "False", 1 => "True"),
    '#default_value' => 1,
    '#boolean' => TRUE
  );

  $form['whitespace'] = array(
    '#type' => 'select',
    '#title' => t('Whitespace'),
    '#description' => t('If set to true the carousel will allow whitespace to be seen when there aren\'t enough items to fill the last page.'),
    '#options' => array(0 => "False", 1 => "True"),
    '#default_value' => 1,
    '#boolean' => TRUE
  );

  $form['nextPrevActions'] = array(
    '#type' => 'select',
    '#title' => t('Next & Previous Links'),
    '#description' => t('whether next and prev links will be included'),
    '#options' => array(0 => "False", 1 => "True"),
    '#default_value' => 1,
    '#boolean' => TRUE
  );

  $form['pagination'] = array(
    '#type' => 'select',
    '#title' => t('Pagination'),
    '#description' => t('whether pagination links will be included'),
    '#options' => array(0 => "False", 1 => "True"),
    '#default_value' => 1,
    '#boolean' => TRUE
  );

  $form['speed'] = array(
    '#type' => 'select',
    '#title' => t('Speed'),
    '#description' => t('Animation speed'),
    '#options' => array('normal' => "Normal", 'fast' => "Fast", 'slow' => "Slow"),
    '#default_value' => 'normal'
  );

  $form['easing'] = array(
    '#type' => 'select',
    '#title' => t('Easing'),
    '#description' => t('supports the jQuery easing plugin'),
    '#options' => array('linear' => 'Linear', 'swing' => 'Swing'),
    '#default_value' => 'linear'
  );

  $form['autoScroll'] = array(
    '#type' => 'select',
    '#title' => t('Autoscroll'),
    '#description' => t('Set to true to invoke auto scrolling, note when the mouse enters the carousel the interval will stop, it\'ll consequently begin when the mouse leaves.'),
    '#options' => array(0 => "False", 1 => "True"),
    '#default_value' => 1,
    '#boolean' => TRUE
  );

  $form['interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Interval'),
    '#description' => t('Sets the amount of time in miliseconds the carousel waits before it automatically scrolls.'),
    '#default_value' => 8000
  );

  $form['continuous'] = array(
    '#type' => 'select',
    '#title' => t('Continuous'),
    '#description' => t('If set to true the carousel will continuously loop through its pages rather than scrolling all the way back to the first page.'),
    '#options' => array(0 => "False", 1 => "True"),
    '#default_value' => 1,
    '#boolean' => TRUE
  );

  $form['touch'] = array(
    '#type' => 'select',
    '#title' => t('Touch'),
    '#description' => t('If set to true the carousel will become draggable allowing you to flick through pages.'),
    '#options' => array(0 => "False", 1 => "True"),
    '#default_value' => 1
  );

  $form['disabled'] = array(
    '#type' => 'select',
    '#title' => t('Disabled'),
    '#description' => t('If set to true carousel will no longer change state.'),
    '#options' => array(0 => "False", 1 => "True"),
    '#default_value' => 0,
    '#boolean' => TRUE
  );

  return $form;
}